Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

###########################

class Solution {
    public int longestOnes(int[] nums, int k) {
        int left = -1, right = 0, countZeroes = 0, maxLen = 0;
        while(right < nums.length) {
            //use
            if(nums[right] == 0) {
                right++;
                countZeroes++;
            } else {
                right++;
            }

            //countZeroes
            while(countZeroes > k) {
                left++;
                if(nums[left] == 0) {
                    countZeroes--;
                }
            }

            //consider
            int currLen = right - left - 1;
            maxLen = Math.max(currLen, maxLen);
        }
        return maxLen;
    }
}
