Given an array of strings strs, group the anagrams together. You can return the answer in any order.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:

There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
Example 2:

Input: strs = [""]

Output: [[""]]

Example 3:

Input: strs = ["a"]

Output: [["a"]]

 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.




###############################


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
       // Time complexity: O(m ∗ nlog⁡n)
      // Space complexity: O(m ∗ n)
        for(String word: strs) {
            char[] ch = word.toCharArray();
            Arrays.sort(ch);
            String sort_word = new String(ch);
            if(!map.containsKey(sort_word)) {
                map.put(sort_word, new ArrayList<>());
            }
            map.get(sort_word).add(word);
        }
        return new ArrayList<>(map.values());
    }
}



##############


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
       // Time complexity: O(m * n)
        // Space complexity: O(m ∗ n)
        Map<String, List<String>> map = new HashMap<>();
        for(String str: strs) {
            int[] count = new int[26];
            for(char ch: str.toCharArray()) {
                count[ch - 'a']++;
            }
            String key = Arrays.toString(count);
            map.putIfAbsent(key, new ArrayList<>());
            map.get(key).add(str);
        }
        return new ArrayList<>(map.values());
    }
}

