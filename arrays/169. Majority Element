Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?



#############################


class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        int ans = 0;
        for(int num: nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
            if(map.get(num) > count) {
                ans = num;
                count = map.get(num);
            }
        }
        return ans;

    }
}


T.C -> O(n)
S>C -> O(n)



#######################

class Solution {
    public int majorityElement(int[] nums) {
        int ans = 0, count = 1;
        for(int i = 1; i < nums.length; i++) {
            if(nums[ans] == nums[i]) {
                count++;
            } else {
                count--;
            }
            if(count == 0) {
                ans = i;
                count++;
            }
        }
        return nums[ans];
        

    }
}

T.C -> O(n)
S>C -> O(1)
