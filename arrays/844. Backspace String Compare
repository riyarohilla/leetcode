Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.
 

Follow up: Can you solve it in O(n) time and O(1) space?




################################################


class Solution {
    // public boolean backspaceCompare(String s, String t) {
    //     // T.C - O(2n)
    //     // S.C - O(n)
    //     Stack<Character> list1 = new Stack<>();
    //     Stack<Character> list2 = new Stack<>();
    //     for(Character ch: s.toCharArray()) {
    //         if(ch != '#') {
    //             list1.push(ch);
    //         } else if (!list1.isEmpty()) {
    //             list1.pop();
    //         }
    //     }
    //     for(Character ch: t.toCharArray()) {
    //         if(ch != '#') {
    //             list2.push(ch);
    //         } else if (!list2.isEmpty()) {
    //             list2.pop();
    //         }
    //     }

    //     return list1.equals(list2);

    // }

____________________________________________________________________

    //  public boolean backspaceCompare(String s, String t) {
    //     // T.C - O(n)
    //     // S.C - O(n)
    //     return check(s).equals(check(t));

    //  }

    //  String check(String s) {
    //     StringBuilder sb = new StringBuilder();
    //     for(Character ch: s.toCharArray()) {
    //         if(ch == '#') {
    //             if(sb.length() > 0) {
    //                 sb.deleteCharAt(sb.length() - 1);
    //             }
    //         } else {
    //             sb.append(ch);
    //         }
    //     }
    //     return sb.toString();
    //  }

____________________________________________________________________

     public boolean backspaceCompare(String s, String t) {
    
        // T.C - O(n)
        // S.C - O(1)

        int i = s.length() - 1;
        int j = t.length() - 1;

        while(i >= 0 || j >= 0) {
            i = getValidNextIndex(s, i);
            j = getValidNextIndex(t, j);

            if(i < 0 && j < 0) {
                return true;
            }
            if(i < 0 || j < 0) {
                return false;
            }
            if(s.charAt(i) != t.charAt(j)) {
                return false;
            }
            i--;
            j--;
        }
        return true;
     }

     int getValidNextIndex(String s, int index) {
        int skip = 0;
        while(index >= 0) {
            if(s.charAt(index) == '#') {
                skip++;
                index--;
            } else if(skip > 0) {
                skip--;
                index--;
            } else {
                break;
            }
        }
        return index;
     }
}
