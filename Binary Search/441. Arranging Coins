You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

 

Example 1:


Input: n = 5
*
* *
* * _
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
Example 2:


Input: n = 8
*
* *
* * *
* * _ _
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.
 

Constraints:

1 <= n <= 231 - 1

##########################################

class Solution {
    public int arrangeCoins(int n) {
        // Time Complexity: O(log(N))
        long start = 1;
        long end = n;
        while(start <= end) {
            long mid = start + (end - start) / 2;
            long coinsCount = (mid * (mid + 1)) / 2; // triangle formula, b * h / 2 (using base as (mid + 1), because of diagonal line is not included in this formula)
            if(coinsCount == n) {
                return (int) mid;
            } else if(coinsCount < n) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return (int) end;
    }
}
