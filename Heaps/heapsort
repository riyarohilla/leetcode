class Solution {
    // T.C -> O(nlogn)
    // S.C -> O(logn)
    int left(int index) {
        return 2 * index + 1;
    }
    int right(int index) {
        return 2 * index + 2;
    }
    int parent(int index) {
        return (index - 1) / 2;
    }
    void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    void downheap(int[] arr, int index, int n) {
        int l = left(index);
        int r = right(index);
        int max = index;
        if(l < n && arr[l] > arr[max])
        {
            max = l;
        }
        if(r < n && arr[r] > arr[max])
        {
            max = r;
        }
        if(max != index) {
            swap(arr, max, index);
            downheap(arr, max, n);
        }

    }
    public int[] sortArray(int[] nums) {
        int n = nums.length;
        for(int i = parent(n);i >= 0; i--) {
            downheap(nums, i, n);
        }
        for (int i = n - 1; i > 0; i--) {
            int temp = nums[0];
            nums[0] = nums[i];
            nums[i] = temp;
            downheap(nums, 0, i);
        }
        return nums;
    }
}
